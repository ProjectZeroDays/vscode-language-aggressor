{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "AggressorScript",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.cna",
				"match": "\\b(if|else|while|for|return|foreach)\\b"
				},
				{"begin": "#",
						"beginCaptures": {
							"0": {
								"name": "punctuation.definition.comment.cna"
							}
						},
						"end": "\\n",
						"name": "comment.line.hash.cna"
				},
				{
					"match": "(?i)(\\$|@|\\%+)\\d?[a-z0-9_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
					"name": "variable.other.cna",
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.cna"
						}
					}
				},
				{
					"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
					"name": "constant.numeric.integer.hexadecimal.cna"
				},
				{
					"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
					"name": "constant.numeric.float.hexadecimal.cna"
				},
				{
					"match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
					"name": "constant.numeric.integer.cna"
				},
				{
					"match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
					"name": "constant.numeric.float.cna"
				},
				{
					"match": "\\b(eq|ne|lt|gt|isin|iswm|-isarray|isfunction|-ishash|-isletter|-isnumber|-isupper|-islower|-istrue)\\b",
					"name": "keyword.operator.cna"
				},
				{
					"match": "x|cmp|\\+|-|%|#|\\*|\\/|\\^|==?|&&|=~|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
					"name": "keyword.operator.cna"
				},
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
					"name": "support.function.any-method.cna"
				},
				{
					"match": "(?<![^.]\\.|:)\\b(false|true)\\b|(?<![.])\\.{3}(?!\\.)",
					"name": "constant.language.lua"
				},
				{
					"name": "storage.modifier.cs",
					"match": "(?<!\\.)\\b(on|sub|alias|inline)\\b"
				}
			]
		},
		"strings": {
			"patterns":[
				{
				"name": "string.quoted.double.cna",
				"begin": "\"",
				"end": "\"",
				"patterns": [
					{
						"name": "constant.character.escape.cna",
						"match": "\\\\."
					}
				]},
				{
					"name": "string.quoted.single.cna",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.cna",
							"match": "\\\\."
						}
					]}
				
			]	
		}
	},
	"scopeName": "source.cna"
}